name: Release

on:
  workflow_call:
    inputs:
      dry-run:
        description: 'Compiles the app but not upload artifacts to distribution server'
        default: false
        required: false
        type: boolean
    secrets:
      GH_TOKEN:
        required: true

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

jobs:
  draft_release:
    permissions:
      contents: write # Allows this job to create releases

    strategy:
      fail-fast: true
      matrix:
        os: [windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    timeout-minutes: 60  # 设置整个 job 的超时时间为 60 分钟

    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Git LFS
        run: |
          git lfs install
          git lfs pull

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        timeout-minutes: 30  
        run: |
          npm install
          npm install -g electron-builder@latest
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Create .env.production.local file
        run: |
          echo "VITE_APP_API=${{ secrets.VITE_APP_API }}" > .env.production.local
          echo "VITE_START_PAGE_URL=${{ secrets.VITE_START_PAGE_URL }}" >> .env.production.local

      - name: Install the Apple certificate and provisioning profile
        if: matrix.os == 'macos-latest'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # 创建临时目录存放证书
          mkdir -p ~/certificates
          # 解码证书
          echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > ~/certificates/certificate.p12
          
          # 创建临时钥匙串
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          # 设置钥匙串超时时间，避免过早锁定
          security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
          
          # 解锁钥匙串
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          
          # 导入证书到钥匙串
          security import ~/certificates/certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          
          # 允许 codesign 访问证书
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # 显示导入的证书信息以便调试
          security find-identity -v -p codesigning build.keychain

      - name: Build and Publish
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
          CSC_LINK: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          CSC_KEY_PASSWORD: ${{ secrets.P12_PASSWORD }}
        run: |
          # 设置更长的超时时间
          export ELECTRON_BUILD_TIMEOUT=3600
          # 显示更多构建信息
          export DEBUG=electron-builder
          
          npx electron-builder --config .electron-builder.config.js --publish always
        timeout-minutes: 60  # 增加超时时间到60分钟

      - name: Compile artifacts ${{ inputs.dry-run && '' || 'and upload them to github release' }}
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 6
          retry_wait_seconds: 15
          retry_on: error
          shell: 'bash'
          command: npx electron-builder --config .electron-builder.config.js --publish ${{ inputs.dry-run && 'never' || 'always' }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
