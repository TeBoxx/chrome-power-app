name: Release

on:
  workflow_call:
    inputs:
      dry-run:
        description: 'Compiles the app but not upload artifacts to distribution server'
        default: false
        required: false
        type: boolean
    secrets:
      GH_TOKEN:
        required: true

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  draft_release:
    permissions:
      contents: write

    strategy:
      fail-fast: true
      matrix:
        os: [windows-latest, macos-latest]
        node_version: [22]

    runs-on: ${{ matrix.os }}

    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Git LFS
        run: |
          git lfs install
          git lfs pull

      # 修复点：使用环境变量代替 npm config
      - name: Configure environment
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 1  # 正确配置方式
          ELECTRON_MIRROR: "https://npmmirror.com/mirrors/electron/"
          NODE_PRE_GYP_MIRROR: "https://npmmirror.com/mirrors/node-pre-gyp/"
        run: |
          echo "Environment configured:"
          echo "PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=$PUPPETEER_SKIP_CHROMIUM_DOWNLOAD"
          echo "ELECTRON_MIRROR=$ELECTRON_MIRROR"

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/electron
            ~/.cache/node-gyp
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Setup macOS build tools
        if: matrix.os == 'macos-latest'
        run: |
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          sudo xcodebuild -license accept
          brew install python3 make gcc
          echo "network=inet" > ~/.curlrc

      - name: Use Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          cache: npm
          cache-dependency-path: '**/package-lock.json'

      - name: Install native modules
        run: npm install --ignore-scripts active-win sqlite3 electron

      - name: Rebuild native modules
        if: matrix.os == 'macos-latest'
        run: |
          npm rebuild sqlite3 --build-from-source

      - name: Install dependencies
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_wait_seconds: 30
          command: npm ci --verbose

      # 后续步骤保持不变...
      - name: Create .env.production.local
        run: |
          echo "VITE_APP_API=${{ secrets.VITE_APP_API }}" > .env.production.local
          echo "VITE_START_PAGE_URL=${{ secrets.VITE_START_PAGE_URL }}" >> .env.production.local

      - name: Install Apple certificates
        if: matrix.os == 'macos-latest'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          mkdir -p ~/certificates
          echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > ~/certificates/certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security import ~/certificates/certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

      - name: Build Project
        run: |
          npm run build
          ls -la packages/main/dist/
          ls -la packages/preload/dist/
          ls -la packages/renderer/dist/

      - name: Build and Publish
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            npx electron-builder --config .electron-builder.config.js --publish always --win
          else
            npx electron-builder --config .electron-builder.config.js --publish always
          fi

      - name: Retry artifacts upload
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 6
          retry_wait_seconds: 15
          command: npx electron-builder --config .electron-builder.config.js --publish ${{ inputs.dry-run && 'never' || 'always' }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
